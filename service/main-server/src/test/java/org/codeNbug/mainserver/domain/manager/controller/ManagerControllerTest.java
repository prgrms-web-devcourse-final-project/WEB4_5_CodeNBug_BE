package org.codeNbug.mainserver.domain.manager.controller;

import static org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import org.codeNbug.mainserver.domain.event.entity.EventCategoryEnum;
import org.codeNbug.mainserver.domain.manager.dto.EventRegisterRequest;
import org.codeNbug.mainserver.domain.manager.dto.layout.LayoutDto;
import org.codeNbug.mainserver.domain.manager.dto.layout.PriceDto;
import org.codeNbug.mainserver.domain.manager.dto.layout.SeatInfoDto;
import org.codeNbug.mainserver.util.TestUtil;
import org.codenbug.user.domain.user.constant.UserRole;
import org.codenbug.user.domain.user.entity.User;
import org.codenbug.user.domain.user.repository.UserRepository;
import org.codenbug.user.security.service.CustomUserDetails;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.transaction.annotation.Transactional;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.containers.wait.strategy.Wait;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional
@ActiveProfiles("test")
@AutoConfigureTestDatabase(replace = NONE)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@Testcontainers
class ManagerControllerTest {

    @Container
    @ServiceConnection
    static MySQLContainer<?> mysql =
        new MySQLContainer<>("mysql:8.0.34")
            .withDatabaseName("ticketoneTest")
            .withUsername("test")
            .withPassword("test");
    @Container
    @ServiceConnection
    static GenericContainer<?> redis =
        new GenericContainer<>("redis:alpine")
            .withExposedPorts(6379)
            .waitingFor(Wait.forListeningPort());
    @Autowired
    private JdbcTemplate jdbcTemplate;

    // 2) Ïä§ÌîÑÎßÅ ÌîÑÎ°úÌçºÌã∞Ïóê Ïª®ÌÖåÏù¥ÎÑà URL/Í≥ÑÏ†ï Ï£ºÏûÖ
    // @DynamicPropertySource
    // static void overrideProps(DynamicPropertyRegistry registry) {
    //
    //     registry.add("spring.datasource.url", mysql::getJdbcUrl);
    //     registry.add("spring.datasource.username", mysql::getUsername);
    //     registry.add("spring.datasource.password", mysql::getPassword);
    //     registry.add("spring.redis.host", () -> redis.getHost());
    //     registry.add("spring.redis.port", () -> redis.getMappedPort(6379));
    //     registry.add("spring.jpa.hibernate.ddl-auto", () -> "create-drop");
    //
    // }

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private UserRepository userRepository;

    private Long managerId;

    @AfterAll
    void tearDown() {
        TestUtil.truncateAllTables(jdbcTemplate);
    }

    @BeforeEach
    void setupTestManager() {
        User manager = User.builder()
                .email("manager@test.com")
                .password("encrypted")
                .name("ÌÖåÏä§Ìä∏ Îß§ÎãàÏ†Ä")
                .sex("M")
                .age(30)
                .phoneNum("010-1234-5678")
                .role(UserRole.MANAGER.getAuthority()) // "ROLE_MANAGER"
                .build();

        userRepository.save(manager);

        // üëá CustomUserDetails ÏÉùÏÑ±
        CustomUserDetails userDetails = new CustomUserDetails(manager);

        // üëá Ïù∏Ï¶ù ÌÜ†ÌÅ∞ ÏÉùÏÑ± Î∞è SecurityContextÏóê Îì±Î°ù
        Authentication authentication = new UsernamePasswordAuthenticationToken(
                userDetails, null, userDetails.getAuthorities()
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);
    }



    @Test
    @WithMockUser(username = "manager@test.com", roles = "MANAGER")
    void Ïù¥Î≤§Ìä∏_Îì±Î°ù_ÏÑ±Í≥µ() throws Exception {
        LayoutDto layoutDto = LayoutDto.builder()
                .layout(List.of(List.of("A1", "A2"), List.of("B1", "B2")))
                .seat(Map.of(
                        "A1", new SeatInfoDto("S"),
                        "A2", new SeatInfoDto("S"),
                        "B1", new SeatInfoDto("A"),
                        "B2", new SeatInfoDto("A")
                ))
                .build();

        EventRegisterRequest request = EventRegisterRequest.builder()
                .title("ÌÖåÏä§Ìä∏ Ïù¥Î≤§Ìä∏")
                .category(EventCategoryEnum.CONCERT)
                .description("ÏÑ§Î™Ö")
                .restriction("ÏóÜÏùå")
                .thumbnailUrl("https://example.com/image.jpg")
                .startDate(LocalDateTime.now().plusDays(5))
                .endDate(LocalDateTime.now().plusDays(7))
                .location("ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨")
                .hallName("1Í¥Ä")
                .seatCount(4)
                .layout(layoutDto)
                .price(List.of(
                        new PriceDto("S", 100000),
                        new PriceDto("A", 80000)
                ))
                .bookingStart(LocalDateTime.now().plusDays(1))
                .bookingEnd(LocalDateTime.now().plusDays(4))
                .agelimit(12)
                .build();

        mockMvc.perform(post("/api/v1/manager/events")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value("200"))
                .andExpect(jsonPath("$.msg").value("Ïù¥Î≤§Ìä∏ Îì±Î°ù ÏÑ±Í≥µ"))
                .andExpect(jsonPath("$.data.eventId").exists());

    }


    @Test
    @DisplayName("Ïù¥Î≤§Ìä∏ ÏàòÏ†ï ÏÑ±Í≥µ")
    void Ïù¥Î≤§Ìä∏_ÏàòÏ†ï_ÏÑ±Í≥µ() throws Exception {
        // Step 1: Ïù¥Î≤§Ìä∏ Îì±Î°ù
        LayoutDto layoutDto = LayoutDto.builder()
                .layout(List.of(List.of("A1", "A2"), List.of("B1", "B2")))
                .seat(Map.of(
                        "A1", new SeatInfoDto("S"),
                        "A2", new SeatInfoDto("S"),
                        "B1", new SeatInfoDto("A"),
                        "B2", new SeatInfoDto("A")
                ))
                .build();

        EventRegisterRequest original = EventRegisterRequest.builder()
                .title("ÌÖåÏä§Ìä∏ Ïù¥Î≤§Ìä∏")
                .category(EventCategoryEnum.CONCERT)
                .description("ÏÑ§Î™Ö")
                .restriction("ÏóÜÏùå")
                .thumbnailUrl("https://example.com/image.jpg")
                .startDate(LocalDateTime.now().plusDays(1))
                .endDate(LocalDateTime.now().plusDays(3))
                .location("ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨")
                .hallName("1Í¥Ä")
                .seatCount(4)
                .layout(layoutDto)
                .price(List.of(
                        new PriceDto("S", 100000),
                        new PriceDto("A", 80000)
                ))
                .bookingStart(LocalDateTime.now())
                .bookingEnd(LocalDateTime.now().plusDays(1))
                .agelimit(12)
                .build();

        MvcResult result = mockMvc.perform(post("/api/v1/manager/events")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(original)))
                .andExpect(status().isOk())
                .andReturn();

        String responseBody = result.getResponse().getContentAsString();
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        Long eventId = jsonNode.path("data").path("eventId").asLong();

        // Step 2: ÏàòÏ†ï ÏöîÏ≤≠
        EventRegisterRequest updated = EventRegisterRequest.builder()
                .title("ÏàòÏ†ïÎêú Ïù¥Î≤§Ìä∏")
                .category(EventCategoryEnum.MUSICAL)
                .description("ÏàòÏ†ïÎêú ÏÑ§Î™Ö")
                .restriction("Ïó∞Î†πÏ†úÌïú")
                .thumbnailUrl("https://example.com/updated.jpg")
                .startDate(LocalDateTime.now().plusDays(2))
                .endDate(LocalDateTime.now().plusDays(4))
                .location("Î∂ÄÏÇ∞Ïãú Ìï¥Ïö¥ÎåÄÍµ¨")
                .hallName("2Í¥Ä")
                .seatCount(4)
                .layout(layoutDto)
                .price(List.of(
                        new PriceDto("S", 100000),
                        new PriceDto("A", 80000)
                ))
                .bookingStart(LocalDateTime.now().plusDays(1))
                .bookingEnd(LocalDateTime.now().plusDays(2))
                .agelimit(15)
                .build();

        // Step 3: ÏàòÏ†ï ÏöîÏ≤≠ Ïã§Ìñâ Î∞è Í≤ÄÏ¶ù
        mockMvc.perform(put("/api/v1/manager/events/{eventId}", eventId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updated)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value("200"))
                .andExpect(jsonPath("$.msg").value("Ïù¥Î≤§Ìä∏ ÏàòÏ†ï ÏÑ±Í≥µ"))
                .andExpect(jsonPath("$.data.eventId").value(eventId));
    }

    @Test
    @DisplayName("Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú ÏÑ±Í≥µ")
    void Ïù¥Î≤§Ìä∏_ÏÇ≠Ï†ú_ÏÑ±Í≥µ() throws Exception {
        // Step 1: Ïù¥Î≤§Ìä∏ Îì±Î°ù
        LayoutDto layoutDto = LayoutDto.builder()
                .layout(List.of(List.of("A1", "A2"), List.of("B1", "B2")))
                .seat(Map.of(
                        "A1", new SeatInfoDto("S"),
                        "A2", new SeatInfoDto("S"),
                        "B1", new SeatInfoDto("A"),
                        "B2", new SeatInfoDto("A")
                ))
                .build();

        EventRegisterRequest request = EventRegisterRequest.builder()
                .title("ÏÇ≠Ï†úÌï† Ïù¥Î≤§Ìä∏")
                .category(EventCategoryEnum.CONCERT)
                .description("ÏÑ§Î™Ö")
                .restriction("ÏóÜÏùå")
                .thumbnailUrl("https://example.com/image.jpg")
                .startDate(LocalDateTime.now().plusDays(1))
                .endDate(LocalDateTime.now().plusDays(3))
                .location("ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨")
                .hallName("1Í¥Ä")
                .seatCount(4)
                .layout(layoutDto)
                .price(List.of(
                        new PriceDto("S", 100000),
                        new PriceDto("A", 80000)
                ))
                .bookingStart(LocalDateTime.now())
                .bookingEnd(LocalDateTime.now().plusDays(1))
                .agelimit(12)
                .build();

        MvcResult result = mockMvc.perform(post("/api/v1/manager/events")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andReturn();

        String responseBody = result.getResponse().getContentAsString();
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        Long eventId = jsonNode.path("data").path("eventId").asLong();

        // Step 2: ÏÇ≠Ï†ú ÏöîÏ≤≠
        mockMvc.perform(patch("/api/v1/manager/events/{eventId}", eventId)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value("200"))
                .andExpect(jsonPath("$.msg").value("Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú ÏÑ±Í≥µ"))
                .andExpect(jsonPath("$.data").doesNotExist());
    }

    @Test
    @DisplayName("Îß§ÎãàÏ†Ä Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ")
    void Îß§ÎãàÏ†Ä_Ïù¥Î≤§Ìä∏_Î™©Î°ù_Ï°∞Ìöå() throws Exception {
        // Step 1: Ïù¥Î≤§Ìä∏ ÌïòÎÇò Îì±Î°ù
        LayoutDto layoutDto = LayoutDto.builder()
                .layout(List.of(List.of("A1", "A2"), List.of("B1", "B2")))
                .seat(Map.of(
                        "A1", new SeatInfoDto("S"),
                        "A2", new SeatInfoDto("S"),
                        "B1", new SeatInfoDto("A"),
                        "B2", new SeatInfoDto("A")
                ))
                .build();

        EventRegisterRequest request = EventRegisterRequest.builder()
                .title("Î™©Î°ù Ï°∞ÌöåÏö© Ïù¥Î≤§Ìä∏")
                .category(EventCategoryEnum.CONCERT)
                .description("ÏÑ§Î™Ö")
                .restriction("ÏóÜÏùå")
                .thumbnailUrl("https://example.com/image.jpg")
                .startDate(LocalDateTime.now().plusDays(1))
                .endDate(LocalDateTime.now().plusDays(3))
                .location("ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨")
                .hallName("1Í¥Ä")
                .seatCount(4)
                .layout(layoutDto)
                .price(List.of(
                        new PriceDto("S", 100000),
                        new PriceDto("A", 80000)
                ))
                .bookingStart(LocalDateTime.now())
                .bookingEnd(LocalDateTime.now().plusDays(1))
                .agelimit(12)
                .build();

        mockMvc.perform(post("/api/v1/manager/events")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk());

        // Step 2: Î™©Î°ù Ï°∞Ìöå ÏöîÏ≤≠
        mockMvc.perform(get("/api/v1/manager/events/me"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value("200"))
                .andExpect(jsonPath("$.msg").value("Îß§ÎãàÏ†Ä Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ"))
                .andExpect(jsonPath("$.data").isArray())
                .andExpect(jsonPath("$.data[0].title").value("Î™©Î°ù Ï°∞ÌöåÏö© Ïù¥Î≤§Ìä∏"));
    }


}
