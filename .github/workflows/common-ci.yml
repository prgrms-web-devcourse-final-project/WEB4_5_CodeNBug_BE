name: 테스트 및 빌드, 배포

on:
  workflow_dispatch:
    inputs:
      buildAll:
        type: boolean
        default: false
        description: "모든 파일 테스트, 빌드"
      runMain:
        type: boolean
        default: false
        description: "메인 배포"
      runQueue:
        type: boolean
        default: false
        description: "큐 배포"
      runDispatch:
        type: boolean
        default: false
        description: "디스패치 배포"

jobs:
  test:
    if: inputs.buildAll == true
    services:
      redis:
        image: redis:7.0.8-alpine
        ports:
          - 6379:6379
      mysql:
        image: mysql:8.0.32
        env:
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: test
        ports:
          - 3306:3306
    #        options: >-
    #          --health-cmd="mysqladmin ping -h localhost"
    #          --health-interval=10s
    #          --health-timeout=5s
    #          --health-retries=3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: main application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.MAIN_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/main-server/src/main/resources/application-secret.yml

      - name: queue application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.QUEUE_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/queue-server/src/main/resources/application-secret.yml

      - name: dispatch application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.DISPATCH_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/message-dispatcher/src/main/resources/application-secret.yml

      - name: Run Tests
        run: ./gradlew test


  makeTagAndReleaseServer:
    if: inputs.buildAll == true
    runs-on: ubuntu-latest
    needs: test
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
        continue-on-error: true


  buildImageAndPushMain:
    if: inputs.buildAll == true
    permissions:
      contents: read
      packages: write
    name: 메인 이미지 빌드와 푸시
    needs: [ test, makeTagAndReleaseServer ]
    outputs:
      owner_lc: ${{ steps.export_owner.outputs.owner_lc }}
      image_name: ${{ steps.export_image.outputs.image_name }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Docker Buildx Install
        uses: docker/setup-buildx-action@v3

      - name: Registry Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: main application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.MAIN_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/main-server/src/main/resources/application-secret.yml
      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

      - name: export image name
        id: export_image
        run: echo "image_name=backend-main-deploy" >> $GITHUB_OUTPUT
      - name: 메인 서버 모듈 빌드 앤 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: service/main-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:${{ needs.makeTagAndReleaseServer.outputs.tag_name }}
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:latest

  buildImageAndPushQueue:
    if: inputs.buildAll == true
    permissions:
      contents: read
      packages: write
    name: 큐 이미지 빌드와 푸시
    needs: [ test, makeTagAndReleaseServer ]
    outputs:
      owner_lc: ${{ steps.export_owner.outputs.owner_lc }}
      image_name: ${{ steps.export_image.outputs.image_name }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Docker Buildx Install
        uses: docker/setup-buildx-action@v3

      - name: Registry Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: main application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.MAIN_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/main-server/src/main/resources/application-secret.yml
      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

      - name: export image name
        id: export_image
        run: echo "image_name=backend-main-deploy" >> $GITHUB_OUTPUT
      - name: 메인 서버 모듈 빌드 앤 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: service/main-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:${{ needs.makeTagAndReleaseServer.outputs.tag_name }}
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:latest
  

  buildImageAndPushDispatch:
    if: inputs.buildAll == true
    permissions:
      contents: read
      packages: write
    name: 디스패치 이미지 빌드와 푸시
    needs: [ test, makeTagAndReleaseServer ]
    outputs:
      owner_lc: ${{ steps.export_owner.outputs.owner_lc }}
      image_name: ${{ steps.export_image.outputs.image_name }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Docker Buildx Install
        uses: docker/setup-buildx-action@v3

      - name: Registry Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: main application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.MAIN_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/main-server/src/main/resources/application-secret.yml
      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

      - name: export image name
        id: export_image
        run: echo "image_name=backend-main-deploy" >> $GITHUB_OUTPUT
      - name: 메인 서버 모듈 빌드 앤 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: service/main-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:${{ needs.makeTagAndReleaseServer.outputs.tag_name }}
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:latest
  
  

  deployMainServer:
    runs-on: ubuntu-latest
    needs: buildImageAndPushMain
    if: inputs.runMain == true
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
      - name: Fetch EC2 Instance ID
        id: fetch_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
          --filters \
          "Name=tag:Name,Values=team01-main" \
          "Name=tag:Team,Values=devcos5-team01" \
          "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[0].InstanceId" \
          --output text) 
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ steps.fetch_instance.outputs.instance_id }}
          working-directory: /
          comment: Deploy
          command: |
            docker pull ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:latest && \
            docker stop app1 2>/dev/null || true && \
            docker rm app1 2>/dev/null || true && \
            docker run -d --name app1 --network env_common -p 9000:9000 ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true

  deployQueueServer:
    runs-on: ubuntu-latest
    needs: buildImageAndPushQueue
    if: inputs.runQueue == true
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
      - name: Fetch EC2 Instance ID
        id: fetch_instance2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
          --filters \
          "Name=tag:Name,Values=team01-main" \
          "Name=tag:Team,Values=devcos5-team01" \
          "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[0].InstanceId" \
          --output text) 
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm

        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ steps.fetch_instance2.outputs.instance_id }}
          working-directory: /
          comment: Deploy
          command: |
            docker pull ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-queue-deploy:latest && \
            docker stop queue-server 2>/dev/null || true && \
            docker rm queue-server 2>/dev/null || true && \
            docker run -d --name queue-server --network env_common -p 9001:9001 ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-queue-deploy:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true


  deployDispatchServer:
    runs-on: ubuntu-latest
    needs: buildImageAndPushDispatch
    if: inputs.runDispatch == true
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
      - name: Fetch EC2 Instance ID
        id: fetch_instance2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
          --filters \
          "Name=tag:Name,Values=team01-main" \
          "Name=tag:Team,Values=devcos5-team01" \
          "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[0].InstanceId" \
          --output text) 
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ steps.fetch_instance2.outputs.instance_id }}
          working-directory: /
          comment: Deploy
          command: |
            docker pull ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-dispatch-deploy:latest && \
            docker stop dispatch-server 2>/dev/null || true && \
            docker rm dispatch-server 2>/dev/null || true && \
            docker run -d --name dispatch-server --network env_common -p 9002:9002 ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-dispatch-deploy:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true
