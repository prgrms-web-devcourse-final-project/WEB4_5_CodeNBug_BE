name: deploy

on:
  push:
    paths:
      - ".github/workflows/**"
      - "service/main-server/src/**"
      - "service/main-server/build.gradle"
      - "service/main-server/Dockerfile"
      - "service/queue-server/src/**"
      - "service/queue-server/build.gradle"
      - "service/queue-server/Dockerfile"
    branches:
      - 김지우/ci-cd
jobs:
  makeTagAndReleaseMainServer:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.sanitize_tag.outputs.clean_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: 'main-v'
      - name: Sanitize Tag
        id: sanitize_tag
        run: |
          RAW="${{ steps.create_tag.outputs.new_tag }}"      # e.g. 0.0.1-----ci-cd.10
          # Extract the number after the last dot in the suffix
          SUFFIX="${RAW##*ci-cd.}"                           # yields 10
          # Build the new semver, keeping major.minor and using SUFFIX as the patch
          # You could also parse major/minor dynamically, but if always 0.0, hardcode:
          NEW_VER="0.0.${SUFFIX}"
          echo "clean_tag=v${NEW_VER}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPushMainServer:
    permissions:
      contents: read
      packages: write
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndReleaseMainServer
    outputs:
      owner_lc: ${{ steps.export_owner.outputs.owner_lc }}
      image_name: ${{ steps.export_image.outputs.image_name }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.MAIN_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/main-server/src/main/resources/application-secret.yml

      - name: 확인
        run: pwd service/main-server/src/main/resources/application-secret.yml
      - name: 확인2
        run: ls -al
      - name: 확인3
        run: ls -al service/main-server/src/main/resources

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v3

      - name: 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

      - name: export image namex
        id: export_image
        run: echo "image_name=backend-main-deploy" >> $GITHUB_OUTPUT
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: service/main-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:${{ needs.makeTagAndReleaseMainServer.outputs.tag_name }}
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-main-deploy:latest
  deployMainServer:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPushMainServer ]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Fetch EC2 Instance ID
        id: fetch_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
          --filters \
          "Name=tag:Name,Values=team01-main" \
          "Name=tag:Team,Values=devcos5-team01" \
          "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[0].InstanceId" \
          --output text) 
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ steps.fetch_instance.outputs.instance_id }}
          working-directory: /
          comment: Deploy
          command: |
            docker pull ghcr.io/${{ needs.buildImageAndPushMainServer.outputs.owner_lc }}/${{ needs.buildImageAndPushMainServer.outputs.image_name }}:latest && \
            docker stop app1 2>/dev/null || true && \
            docker rm app1 2>/dev/null || true && \
            docker run -d --name app1 --network env_common -p 9000:9000 ghcr.io/${{ needs.buildImageAndPushMainServer.outputs.owner_lc }}/${{ needs.buildImageAndPushMainServer.outputs.image_name }}:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true

  makeTagAndReleaseQueueServer:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: 'queue-v'
      - name: Sanitize Tag
        id: sanitize_tag
        run: |
          RAW="${{ steps.create_tag.outputs.new_tag }}"      # e.g. 0.0.1-----ci-cd.10
          # Extract the number after the last dot in the suffix
          SUFFIX="${RAW##*ci-cd.}"                           # yields 10
          # Build the new semver, keeping major.minor and using SUFFIX as the patch
          # You could also parse major/minor dynamically, but if always 0.0, hardcode:
          NEW_VER="0.0.${SUFFIX}"
          echo "clean_tag=v${NEW_VER}" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPushQueueServer:
    name: 큐 서버 도커 이미지 빌드와 푸시
    needs: makeTagAndReleaseQueueServer
    outputs:
      owner_lc: ${{ steps.export_owner.outputs.owner_lc }}
      image_name: ${{ steps.export_image.outputs.image_name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: application-secret 추가
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.QUEUE_APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > service/queue-server/src/main/resources/application-secret.yml
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v3
      - name: 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
      - name: export image name
        id: export_image
        run: echo "image_name=backend-queue-deploy" >> $GITHUB_OUTPUT

      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: service/queue-server/Dockerfile

          push: true
          tags: |
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-queue-deploy:${{ needs.makeTagAndReleaseQueueServer.outputs.tag_name }}
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/backend-queue-deploy:latest
  deployQueueServer:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPushQueueServer ]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Fetch EC2 Instance ID
        id: fetch_instance2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
          --filters \          
          "Name=tag:Name,Values=team01-queue" \
          "Name=tag:Team,Values=devcos5-team01" \
          "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[0].InstanceId" \
          --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ steps.fetch_instance2.outputs.instance_id }}
          working-directory: /
          comment: Deploy
          command: |
            docker pull ghcr.io/${{ needs.buildImageAndPushQueueServer.outputs.owner_lc }}/${{ needs.buildImageAndPushQueueServer.outputs.image_name }}:latest && \
            docker stop app2 2>/dev/null || true && \
            docker rm app2 2>/dev/null || true && \
            docker run -d --name app2 --network env_common -p 9001:9001 ghcr.io/${{ needs.buildImageAndPushMainServer.outputs.owner_lc }}/${{ needs.buildImageAndPushMainServer.outputs.image_name }}:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true